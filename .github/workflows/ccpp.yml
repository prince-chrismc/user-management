name: Backend CI

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - 'api/schema/**'
      - '.github/actions/**'
      - '.github/workflows/ccpp.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - 'api/schema/**'
      - '.github/actions/**'
      - '.github/workflows/ccpp.yml'

env:
  CONAN_REMOTE: user-management

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: cache conan data
      uses: actions/cache@v3
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}

    - name: cache pip data
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: setup conan
      uses: ./.github/actions/setup-conan

    - name: install cmake
      uses: lukka/get-cmake@latest

    - name: install lcov
      run: |
        sudo apt-get install lcov

    - name: configure
      run: |
        mkdir backend/build
        cd backend/build
        cmake .. -DBUILD_TESTS=ON -DCOVERAGE=ON -DCMAKE_BUILD_TYPE=Debug

    - name: build
      run: |
        cd backend/build
        make user_tests

    - name: coverage
      run: |
        cd backend/build
        make coverage

    - name: Coveralls GitHub Action
      uses: coverallsapp/github-action@1.1.3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: backend/build/coverage.info

  macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3

    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: cache pip data
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: setup conan
      uses: ./.github/actions/setup-conan
    - run: conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE christopherm@jfrog.com

    - name: install cmake
      uses: lukka/get-cmake@latest

    - run: |
        cd backend
        conan lock create conanfile.py --version 1.0.0-dev.1 --lockfile=conan.lock --lockfile-out=build/conan.lock -pr:b=default
        conan install conanfile.py 1.0.0-dev.1@ --lockfile=build/conan.lock --lockfile-out=build/conan.lock --build=missing -if /tmp

        conan upload --all -r $CONAN_REMOTE -c '*'

    - name: configure
      run: |
        mkdir backend/build
        cd backend/build
        cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release

    - name: build
      run: |
        cd backend/build
        make user_tests

    - name: test
      run: |
        cd backend/build
        ./test/user_tests
